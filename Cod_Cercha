# -*- coding: utf-8 -*-
"""
Created on Sun Sep 17 17:11:47 2017

@author: Daniela Morales C
"""

import numpy as np        #Libreria para calculos generales
import xlrd               #Libreria para leer datos de excel

#Este es el programa para cerchas
#Datos de entrada

doc = xlrd.open_workbook('Cercha_4.xlsx')
worksheet = doc.sheet_by_name('Hoja1')

Nnodos = worksheet.cell(1,1)
Nelements = worksheet.cell(2,1)

Nn = np.int(worksheet.cell_value(1,1)) #numero de nodos
Ne = np.int(worksheet.cell_value(2,1)) #Numero de elementos
GL = np.int(worksheet.cell_value(1,4)) #Numero de grados de libertad
GLE = np.int(worksheet.cell_value(2,4)) #Numero de grados de libertad de cada elemento
NGLL = np.int(worksheet.cell_value(1,7)) #Numero de grados de libertad libres
NGLR = np.int(worksheet.cell_value(2,7)) #Numero de grados de libertad restringidos



MGL = np.zeros((Ne,GLE))      #Matriz de grados de libertad
MC = np.zeros((Ne,4))       #Matriz con coordenadas iniciales y finales
MA = np.zeros((Ne,1))       #Matriz con áreas
ME = np.zeros((Ne,1))       #Matriz con módulo de elasticidad

i = 0
j = 0
for i in range (Ne):
    for j in range(GLE):
        MGL[i,j] = worksheet.cell_value(i+7,j+7)
        MC[i,j] = worksheet.cell_value(i+7,j+3)
        MA[i,0] = worksheet.cell_value(i+7,1)
        ME[i,0] = worksheet.cell_value(i+7,2)

ML = np.zeros((Ne,1))       #Matriz con longitudes de cada elemento

i = 0
for i in range(Ne):
    ML[i,0] = ((MC[i,2]-MC[i,0])**2 + (MC[i,3]-MC[i,1])**2)**0.5

     
#Matriz tridimensional de matrices de rigidez local de cada elemento
MAL = np.zeros(((Ne,4,4)))       

i = 0
for i in range(Ne):
    MAL[i,0,0] = (MA[i,0]*ME[i,0])/ML[i,0]
    MAL[i,0,2] = -MAL[i,0,0]
    MAL[i,2,0] = -MAL[i,0,0]
    MAL[i,2,2] = MAL[i,0,0]    
    

#Matriz tridimensional de matrices de transfromación de cada elemento
MAT = np.zeros(((Ne,GLE,GLE)))

i = 0
for i in range(Ne):
    MAT[i,0,0] = (MC[i,2]-MC[i,0])/ML[i,0]
    MAT[i,1,0] = (MC[i,3]-MC[i,1])/ML[i,0]
    MAT[i,2,2] = MAT[i,0,0]
    MAT[i,3,2] = MAT[i,1,0]


#Matriz tridimensional de matrices de rigidez global de cada elemento 
  
MAG = np.zeros(((Ne,GLE,GLE)))
MAG1 = np.zeros(((Ne,GLE,GLE)))
MATT = np.zeros((Ne,GLE,GLE))

for i in range (Ne):
    MATT[i] = MAT[i].transpose()

i = 0
for i in range(Ne):
    MAG1[i] = (MAT[i]).dot(MAL[i])
    MAG[i] = (MAG1[i]).dot(MATT[i])

#Matriz de rigidez global de la estructura

KG = np.zeros((GL,GL))

i = 0
j = 0
k = 0
for i in range(Ne):
    for j in range(GLE):
        for k in range(GLE):
            x = int(MGL[i,j]-1)
            y = int(MGL[i,k]-1)
            KG[x,y] = KG[x,y] + MAG[i,j,k]
            



K0 = KG[0:NGLL,0:NGLL]
K1 = KG[0:NGLL,NGLL:GL]
K2 = KG[NGLL:GL,0:NGLL]
K3 = KG[NGLL:GL,NGLL:GL]




F0 = np.zeros((NGLL,1))

i = 0
for i in range (NGLL):
    F0[i,0] = worksheet.cell_value(20+i,1)




U1 = np.zeros((NGLR,1))

i = 0
for i in range (NGLR):
    U1[i,0] = worksheet.cell_value(29+i,2)
    
Feff = F0 - ((K1).dot(U1))

K0_inv = np.linalg.inv(K0)
U0 = (K0_inv).dot(Feff)
F1 = (K2).dot(U0) + (K3).dot(U1)


U = np.concatenate((U0, U1), axis=0)

MU = np.zeros(((Ne,GLE,1)))

i = 0
j = 0
x = 0
for i in range(Ne):
    for j in range(GLE):
        x = int(MGL[i,j]-1)
        MU[i,j,0] = U[x,0]
        
MFG = np.zeros(((Ne,GLE,1)))

i = 0
for i in range(Ne):
    MFG[i] = (MAG[i]).dot(MU[i])
    
MFL = np.zeros(((Ne,GLE,1)))

i = 0
for i in range(Ne):
    MFL[i] = (MATT[i]).dot(MFG[i])

FELEM = np.zeros((Ne,1))

i = 0
for i in range(Ne):
    FELEM[i,0] = -MFL[i,0,0]





